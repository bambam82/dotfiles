"
" :so % to refresh .vimrc after making changes
" :VundleInstall to install new stuff
" :VundleUpdate to update to latest versions
" :VundleClean to remove packages no longer used.
"

if &compatible
  set nocompatible
end

""""""""""""""""""""""""""""""""""""
""" Vundle settings and plugins  """
""""""""""""""""""""""""""""""""""""

" Vundle settings
" set the runtime path to include Vundle and initialize
" first setup Vundle:
" git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
" call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
" https://github.com/<variable>
Plugin 'gmarik/Vundle.vim'
" Plugin 'vim-scripts/indentpython.vim'

" Syntax checking / highlighting
" Plugin 'scrooloose/syntastic'
Plugin 'nvie/vim-flake8'
Bundle 'klen/python-mode'
" Bundle 'ervandew/supertab'
" Bundle 'davidhalter/jedi-vim'

" Vim paste easy
Plugin 'roxma/vim-paste-easy'

" Filebrowsing
" Status line + buffer
Plugin 'vim-airline/vim-airline'
" Plugin 'vim-airline/vim-airline-themes'
Plugin 'bling/vim-bufferline'
" Plugin 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}

" Perl plugin
Plugin 'vim-perl/vim-perl'

" Markdown for Vim
" https://github.com/plasticboy/vim-markdown
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
" Auto-pairs plugin. "",'',``. Quite annoying sometimes.
" Plugin 'jiangmiao/auto-pairs'

" Multi-insert, just like sublime.
Plugin 'terryma/vim-multiple-cursors'

" Vim surroundings {}[](). quite annoying sometimes.
Plugin 'tpope/vim-surround'

" Vim repeat for plugins, to be able to use . with them.
Plugin 'tpope/vim-repeat'

" All of your Plugins must be added before the following line
call vundle#end()            " required


"""""""""""""""""""""""""""""""""""
""" Plugin settings and tweaks  """
"""""""""""""""""""""""""""""""""""

""""""""""""""""""
" Surround shortcuts
""""""""""""""""""
" https://github.com/tpope/vim-surround
"  Old text                  Command     New text ~
"  "Hello *world!"           ds"         Hello world!
"  [123+4*56]/2              cs])        (123+456)/2
"  "Look ma, I'm *HTML!"     cs"<q>      <q>Look ma, I'm HTML!</q>
"  if *x>3 {                 ysW(        if ( x>3 ) {
"  my $str = *whee!;         vllllS'     my $str = 'whee!';
" with visual, use S" to surround with ".

""""""""""""""""""
" Python settings
""""""""""""""""""
" Python-mode
" Activate rope
" Keys:
" K             Show python docs
" <Ctrl-Space>  Rope autocomplete
" <Ctrl-c>g     Rope goto definition
" <Ctrl-c>d     Rope show documentation
" <Ctrl-c>f     Rope find occurrences
" <Leader>b     Set, unset breakpoint (g:pymode_breakpoint enabled)
" [[            Jump on previous class or function (normal, visual, operator modes)
" ]]            Jump on next class or function (normal, visual, operator modes)
" [M            Jump on previous class or method (normal, visual, operator modes)
" ]M            Jump on next class or method (normal, visual, operator modes)
" Defaults are commented.
let g:pymode = 1
let g:pymode_python = 'python3'

" Documentation
let g:pymode_doc = 0
" let g:pymode_doc_key = 'K'

" Linting
let g:pymode_lint = 1
let g:pymode_lint_checkers = ['pyflakes', 'pep8', 'mccabe']
" " Values may be chosen from: `pylint`, `pep8`, `mccabe`, `pep257`, `pyflakes`.
" Auto check on save
let g:pymode_lint_write = 1

" Mccabe complexity setting
" let g:pymode_lint_options_mccabe = { 'complexity': 12 }

" let g:pymode_rope = 1
" added additionally.
let g:pymode_rope_completion = 1
let g:pymode_rope_complete_on_dot = 1
let g:pymode_rope_completion_bind = '<leader>c'
let g:pymode_rope_autoimport_modules = ['os', 're', 'argparse', 'datetime']

" Enable breakpoints plugin
let g:pymode_breakpoint = 1
let g:pymode_breakpoint_bind = '<leader>b'

" syntax highlighting
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_print_as_function = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all
let g:pymode_syntax_highlight_self = g:pymode_syntax_all

" If you prefer the Omni-Completion tip window to close when a selection is
" made, these lines close it on movement in insert mode or when leaving
" insert mode
autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

" Don't autofold code
let g:pymode_folding = 0

" Python3 highlight code
" let python_highlight_all = 1

""" jedi-vim """
" https://github.com/davidhalter/jedi-vim
" let g:jedi#goto_command = "<leader>d"
" let g:jedi#goto_assignments_command = "<leader>g"
" let g:jedi#goto_definitions_command = ""
" let g:jedi#documentation_command = " K"
" let g:jedi#usages_command = "<leader>n"
" let g:jedi#completions_command = "<C-Space>"
" let g:jedi#completions_command = "<leader>c"
" let g:jedi#rename_command = "<leader>r"

"""""""""""""""""""""""""""""""""
" airline settings
"""""""""""""""""""""""""""""""""
let g:airline#extensions#tabline#enabled = 1

"""""""""""""""""""""""""""""""""
" Vim Markdown settings
"""""""""""""""""""""""""""""""""
" https://github.com/plasticboy/vim-markdown
let g:vim_markdown_folding_disabled = 1
set conceallevel=1
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_json_frontmatter = 1
let g:vim_markdown_autowrite = 1

